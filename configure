#!/bin/bash
#==================================================================================================
#
#  Configuration script for the Blaze test scenarios
#
#  Copyright (C) 2013 Klaus Iglberger - All Rights Reserved
#
#  This file is part of the Blaze library. You can redistribute it and/or modify it under
#  the terms of the New (Revised) BSD License. Redistribution and use in source and binary
#  forms, with or without modification, are permitted provided that the following conditions
#  are met:
#
#  1. Redistributions of source code must retain the above copyright notice, this list of
#     conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice, this list
#     of conditions and the following disclaimer in the documentation and/or other materials
#     provided with the distribution.
#  3. Neither the names of the Blaze development group nor the names of its contributors
#     may be used to endorse or promote products derived from this software without specific
#     prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
#  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#
#==================================================================================================


#######################################
# Parsing the command line arguments

# Checking the number of command line arguments
if [ $# -ge 2 ]; then
   echo "Invalid use of the Blaze sandbox configuration script. Type './configure -h' to display the help."
   exit 1
fi

# Printing the help
if [ "$1" = "--help" ] || [ "$1" = "-help" ] || [ "$1" = "-h" ]; then
   echo
   echo "Usage: ./configure [<config_file>]"
   echo
   echo "Configuration of the compilation process of the Blaze test scenarios. The according"
   echo "system-specific settings are specified via the given configuration file <config_file>."
   echo "In case no <config_file> is specified, the settings of the default 'Configfile' are"
   echo "used."
   echo
   echo "Options:"
   echo " -h, -help, --help  Displays this information"
   echo
   exit 0
fi


#####################################
# Selecting the configuration file

CONFIGFILE="Configfile"

if [ $# = 1 ]; then
   if [ ! -f "$1" ]; then
      echo "Config file '$1' cannot be found."
      exit 1
   else
      CONFIGFILE="$1"
   fi
fi

source $CONFIGFILE


##########################
# Checking the settings

# Checking the compiler settings
if [ ! -n $CXX ]; then
   echo "Compiler unspecified. Please select a compiler for the compilation process!"
   exit 1
fi

# Checking the settings for the BLAS module
if [ "$BLAS" != "yes" ] && [ "$BLAS" != "no" ]; then
   echo "Invalid setting for the BLAS module."
   exit 1
fi

# Checking the settings for the Blitz++ library
if [ "$BLITZ" != "yes" ] && [ "$BLITZ" != "no" ]; then
   echo "Invalid setting for the Blitz++ library."
   exit 1
fi

# Checking the settings for the GMM++ library
if [ "$GMM" != "yes" ] && [ "$GMM" != "no" ]; then
   echo "Invalid setting for the GMM++ library."
   exit 1
fi

# Checking the settings for the GMM++ library
if [ "$GMM_ATLAS_INSTALLED" != "yes" ] && [ "$GMM_ATLAS_INSTALLED" != "no" ]; then
   echo "Invalid setting for the GMM_ATLAS_INSTALLED flag."
   exit 1
fi

# Checking the settings for the Armadillo library
if [ "$ARMADILLO" != "yes" ] && [ "$ARMADILLO" != "no" ]; then
   echo "Invalid setting for the Armadillo library."
   exit 1
fi

# Checking the settings for the MTL library
if [ "$MTL" != "yes" ] && [ "$MTL" != "no" ]; then
   echo "Invalid setting for the MTL library."
   exit 1
fi

# Checking the settings for the Eigen library
if [ "$EIGEN" != "yes" ] && [ "$EIGEN" != "no" ]; then
   echo "Invalid setting for the EIGEN library."
   exit 1
fi

# Checking the settings for the Eigen library
if [ "$EIGEN_MKL_INSTALLED" != "yes" ] && [ "$EIGEN_MKL_INSTALLED" != "no" ]; then
   echo "Invalid setting for the EIGEN_MKL_INSTALLED flag."
   exit 1
fi


############################
# Blaze specific settings

INSTALL_PATH="$( cd "$( dirname "$0" )" && pwd )"
BLAZE_PATH="${INSTALL_PATH%%/data}/blaze"


############################
# Generating the Makefile

# Configuration of the compiler flags
if [ "$MTL" = "yes" ] && [ "$BLAS" = "yes" ]; then
   CXXFLAGS="$CXXFLAGS -DMTL_HAS_BLAS"
fi
if [ "$GMM" = "yes" ] && [ "$GMM_ATLAS_INSTALLED" = "yes" ]; then
   CXXFLAGS="$CXXFLAGS -DGMM_USES_LAPACK"
fi
if [ "$EIGEN" = "yes" ] && [ "$EIGEN_MKL_INSTALLED" = "yes" ]; then
   CXXFLAGS="$CXXFLAGS -DEIGEN_USE_BLAS"
fi

# Configuration of the include paths
INCLUDES="-I$BLAZE_PATH"

BOOST_INCLUDE_PATH=${BOOST_INCLUDE_PATH%"/"}
if [ -n "$BOOST_INCLUDE_PATH" ] && [[ ! "$INCLUDES" =~ "$BOOST_INCLUDE_PATH" ]]; then
   INCLUDES="$INCLUDES -isystem $BOOST_INCLUDE_PATH"
fi

BLAS_INCLUDE_PATH=${BLAS_INCLUDE_PATH%"/"}
if [ "$BLAS" = "yes" ]; then
   if [ -n "$BLAS_INCLUDE_PATH" ] && [[ ! "$INCLUDES" =~ "$BLAS_INCLUDE_PATH" ]]; then
      INCLUDES="$INCLUDES -isystem $BLAS_INCLUDE_PATH"
   fi
fi

BLITZ_INCLUDE_PATH=${BLITZ_INCLUDE_PATH%"/"}
if [ "$BLITZ" = "yes" ]; then
   if [ -n "$BLITZ_INCLUDE_PATH" ] && [[ ! "$INCLUDES" =~ "$BLITZ_INCLUDE_PATH" ]]; then
      INCLUDES="$INCLUDES -isystem $BLITZ_INCLUDE_PATH"
   fi
fi

GMM_INCLUDE_PATH=${GMM_INCLUDE_PATH%"/"}
if [ "$GMM" = "yes" ]; then
   if [ -n "$GMM_INCLUDE_PATH" ] && [[ ! "$INCLUDES" =~ "$GMM_INCLUDE_PATH" ]]; then
      INCLUDES="$INCLUDES -isystem $GMM_INCLUDE_PATH"
   fi
fi

ARMADILLO_INCLUDE_PATH=${ARMADILLO_INCLUDE_PATH%"/"}
if [ "$ARMADILLO" = "yes" ]; then
   if [ -n "$ARMADILLO_INCLUDE_PATH" ] && [[ ! "$INCLUDES" =~ "$ARMADILLO_INCLUDE_PATH" ]]; then
      INCLUDES="$INCLUDES -isystem $ARMADILLO_INCLUDE_PATH"
   fi
fi

MTL_INCLUDE_PATH=${MTL_INCLUDE_PATH%"/"}
if [ "$MTL" = "yes" ]; then
   if [ -n "$MTL_INCLUDE_PATH" ] && [[ ! "$INCLUDES" =~ "$MTL_INCLUDE_PATH" ]]; then
      INCLUDES="$INCLUDES -isystem $MTL_INCLUDE_PATH"
   fi
fi

EIGEN_INCLUDE_PATH=${EIGEN_INCLUDE_PATH%"/"}
if [ "$EIGEN" = "yes" ]; then
   if [ -n "$EIGEN_INCLUDE_PATH" ] && [[ ! "$INCLUDES" =~ "$EIGEN_INCLUDE_PATH" ]]; then
      INCLUDES="$INCLUDES -isystem $EIGEN_INCLUDE_PATH"
   fi
fi

# Configuration of the library path and link libraries
LIBRARIES="-L$BLAZE_PATH/lib -lblaze"

BOOST_LIBRARY_PATH=${BOOST_LIBRARY_PATH%"/"}
if [ -n "$BOOST_LIBRARY_PATH" ] && [[ ! "$LIBRARIES" =~ "$BOOST_LIBRARY_PATH" ]]; then
   LIBRARIES="$LIBRARIES -L$BOOST_LIBRARY_PATH"
fi

BOOST_SYSTEM_LIBRARY=${BOOST_SYSTEM_LIBRARY#"lib"}
if [ -n "$BOOST_SYSTEM_LIBRARY" ]; then
   LIBRARIES="$LIBRARIES -l$BOOST_SYSTEM_LIBRARY"
else
   LIBRARIES="$LIBRARIES -lboost_system"
fi

BOOST_THREAD_LIBRARY=${BOOST_THREAD_LIBRARY#"lib"}
if [ -n "$BOOST_THREAD_LIBRARY" ]; then
   LIBRARIES="$LIBRARIES -l$BOOST_THREAD_LIBRARY"
else
   LIBRARIES="$LIBRARIES -lboost_thread"
fi

if [ "$BLAS" = "yes" ]; then
   if [ -n "$BLAS_LIBRARY_PATH" ] && [[ ! "$LIBRARIES" =~ "$BLAS_LIBRARY_PATH" ]]; then
      LIBRARIES="$LIBRARIES -L$BLAS_LIBRARY_PATH"
   fi
   if [ -n "$BLAS_LIBRARIES" ]; then
      LIBRARIES="$LIBRARIES $BLAS_LIBRARIES"
   fi
fi

if [ "$BLITZ" = "yes" ]; then
   if [ -n "$BLITZ_LIBRARY_PATH" ] && [[ ! "$LIBRARIES" =~ "$BLITZ_LIBRARY_PATH" ]]; then
      LIBRARIES="$LIBRARIES -L$BLITZ_LIBRARY_PATH"
   fi
   LIBRARIES="$LIBRARIES -lblitz"
fi

# Writing the Makefile
cat > Makefile <<EOF
#==================================================================================================
#
#  Makefile for the Blaze sandbox
#
#  Copyright (C) 2013 Klaus Iglberger - All Rights Reserved
#
#  This file is part of the Blaze library. You can redistribute it and/or modify it under
#  the terms of the New (Revised) BSD License. Redistribution and use in source and binary
#  forms, with or without modification, are permitted provided that the following conditions
#  are met:
#
#  1. Redistributions of source code must retain the above copyright notice, this list of
#     conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice, this list
#     of conditions and the following disclaimer in the documentation and/or other materials
#     provided with the distribution.
#  3. Neither the names of the Blaze development group nor the names of its contributors
#     may be used to endorse or promote products derived from this software without specific
#     prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
#  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
#  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#  DAMAGE.
#
#==================================================================================================


# Compiler configuration
CXX      = $CXX
CXXFLAGS = $CXXFLAGS

# Include paths
INCLUDES = $INCLUDES

# Libraries
LIBRARIES = $LIBRARIES


# Build rules
sandbox: src/Sandbox.cpp
	\$(CXX) \$(CXXFLAGS) \$(INCLUDES) -o sandbox src/Sandbox.cpp \$(LIBRARIES)


# Clean up rules
clean:
	@echo "Cleaning up..."
	@\$(RM) sandbox


# Setting the independent commands
.PHONY: sandbox clean
EOF
