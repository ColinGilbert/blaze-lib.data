#==================================================================================================
#
#  Configfile file for the Blaze test scenarios
#
#  Copyright (C) 2011 Klaus Iglberger - All Rights Reserved
#
#  This file is part of the Blaze library. This library is free software; you can redistribute
#  it and/or modify it under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 3, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
#  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with a special
#  exception for linking and compiling against the Blaze library, the so-called "runtime
#  exception"; see the file COPYING. If not, see http://www.gnu.org/licenses/.
#
#==================================================================================================

# Compiler selection
CXX=

# Special compiler flags
CXXFLAGS=

# Configuration of the boost library
# The boost library (see www.boost.org) is precondition for the Blaze library and the
# Blaze test scenarios, i.e., it is not possible to create any example executable without
# boost. Blaze requires you to have at least the boost version 1.39.0 or higher installed
# on your system. In case the boost include directory is not set, it is assumed that the
# boost headers are installed in standard paths (as for instance '/usr/include/boost').
# Additionally, it is necessary to specify the library path of the boost libraries and
# the name of the boost system and thread libraries (as for instance 'boost_thread-mt').
# In case the library path is not specified, it is assumed that the libraries are installed
# in standard paths (for example '/usr/lib/' or '/usr/lib64/'). If the name of the system
# library is not specified it is assumed that the library is called 'libboost_system.*'.
# If the name of the thread library is not specified it is assumed that the library is
# called 'libboost_system.*'.
BOOST_INCLUDE_PATH=
BOOST_LIBRARY_PATH=
BOOST_SYSTEM_LIBRARY=
BOOST_THREAD_LIBRARY=

# The Blaze as well as the MTL library offer the possibilty to use a BLAS library for
# certain linear algebra operations (such as for instance matrix-matrix multiplications).
# If the BLAS switch is set to 'yes', both libraries will use BLAS functions accordingly.
# Note that in case Blaze is configured to use a BLAS library, it is mandatory to also
# configure the BLAS library for the test scenarios. If BLAS is activated, per default
# it is assumed that the BLAS include file is called 'cblas.h' and is installed in
# standard paths (as for instance '/usr/include/cblas.h'). Both default settings can be
# changed by explicitly specifying the BLAS include path and the name of the BLAS include
# file. Additionally, the BLAS library path has to be specified (otherwise it is assumed
# that the library resides in standard paths) and the BLAS libraries have to be specified
# (for example '-lf77blas -lcblas -latlas' for the ATLAS library). If the BLAS switch is
# set to 'no', the Blaze and the MTL libraries use their default implementations of the
# according operations.
BLAS="no"
BLAS_INCLUDE_PATH=
BLAS_INCLUDE_FILE=
BLAS_LIBRARY_PATH=
BLAS_LIBRARIES=

# Configuration of the Blitz++ library (optional)
# With this setting it is possible to include the Blitz++ expression template library
# to the test scenarios. If the switch is set to 'yes' the Blitz++ library is included
# in the compilation process. In case the Blitz++ include directory is not set, Blaze
# expects the according headers in the subdirectory 'blitz' in standard paths (for
# example '/usr/include/blitz'). In case the Blitz++ library path is not specified,
# Blaze expects the library in standard paths (as for instance '/usr/lib').
BLITZ="no"
BLITZ_INCLUDE_PATH=
BLITZ_LIBRARY_PATH=

# Configuration of the GMM++ library (optional)
# This switch configures the GMM++ benchmarks. If this switch is set to 'yes' GMM++ is
# included in the compilation process. If the ATLAS BLAS library is installed some of
# GMM's algorithms can be accelerated by optimized ATLAS routines. In case the GMM++
# include directory is not set, Blaze expects the according headers in the standard
# paths (for example '/usr/include/gmm').
GMM="no"
GMM_ATLAS_INSTALLED="no"
GMM_INCLUDE_PATH=

# Configuration of the Armadillo library (optional)
# The following switch includes or excludes the Armadillo library to the compilation
# process. In case the Armadillo include directory is not set, Blaze expects the
# according headers in the standard paths (as for instance '/usr/include/').
ARMADILLO="no"
ARMADILLO_INCLUDE_PATH=

# Configuration of the MTL library (optional)
# This setting includes or excludes the MTL library in the test scenario compilation
# process. If the switch is set to 'yes' MTL is included in the compilation process.
# In case the MTL include directory is not set, Blaze expects the according headers
# in the boost directories (as for instance 'boost/numeric/mtl').
MTL="no"
MTL_INCLUDE_PATH=

# Configuration of the Eigen library (optional)
# This switch includes or excludes the Eigen library. If the switch is set to 'yes' the
# Eigen library is included in the compilation process. In case the Intel MKL is installed,
# some of Eigen's algorithms are silently substituted with calls to Intel MKL routines. In
# case the Eigen include directory is not set, Blaze expects the according headers in
# standard paths (for example '/usr/include/Eigen').
EIGEN="no"
EIGEN_MKL_INSTALLED="no"
EIGEN_INCLUDE_PATH=
